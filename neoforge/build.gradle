plugins {
    id "com.gradleup.shadow" version "8.3.6"
}

architectury {
    platformSetupLoomIde()
    neoForge()
}

configurations {
    common {
        canBeResolved = true
        canBeConsumed = false
    }
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentNeoForge.extendsFrom common

    // Files in this configuration will be bundled into your mod using the Shadow plugin.
    // Don't use the `shadow` configuration from the plugin itself as it's meant for excluding files.
    shadowBundle {
        canBeResolved = true
        canBeConsumed = false
    }
}

repositories {
    maven { url "https://maven.neoforged.net/releases/" }
}

dependencies {
    neoForge "net.neoforged:neoforge:${project.neoforged_version}"

    // Common
    common(project(path: ":common", configuration: "namedElements")) { transitive false }
    shadowBundle(project(path: ":common", configuration: "transformProductionNeoForge"))

    // Configuration
    include(forgeRuntimeLibrary("org.yaml:snakeyaml:${project.snakeyaml}"))
    include(forgeRuntimeLibrary("space.arim.dazzleconf:dazzleconf-core:${project.dazzleconf}"))
    include(forgeRuntimeLibrary("space.arim.dazzleconf:dazzleconf-ext-snakeyaml:${project.dazzleconf}"))

    // Adventure Text
    shadowBundle(implementation(forgeRuntimeLibrary("net.kyori:adventure-text-minimessage:${project.adventure_text}"))) {
        exclude group: "org.intellij"
        exclude group: "org.jetbrains"
    }
    shadowBundle(implementation(forgeRuntimeLibrary("net.kyori:adventure-text-serializer-gson:${project.adventure_text}"))) {
        exclude group: "com.google.code.gson"
        exclude group: "org.intellij"
        exclude group: "org.jetbrains"
    }

    // Allows running other mods in dev environment
    modLocalRuntime(fileTree(dir: 'runtime-mods', include: '*.jar'))
}

tasks.withType(org.gradle.jvm.tasks.Jar).configureEach {
    archiveAppendix.set("neoforge")
}

shadowJar {
    exclude "architectury.common.json"

    relocateDependency(shadowJar, "net.kyori")
    mergeServiceFiles()

    configurations = [project.configurations.shadowBundle]
    archiveClassifier = 'dev-shadow'
}

private static void relocateDependency(com.github.jengelman.gradle.plugins.shadow.tasks.ShadowJar shadowJar, String pattern) {
    shadowJar.relocate(pattern, "servercore_libs.${pattern}")
}

remapJar {
    input.set shadowJar.archiveFile
    dependsOn shadowJar
    archiveClassifier.set null
    atAccessWideners.add('servercore.accesswidener')
}

components.java {
    withVariantsFromConfiguration(project.configurations.shadowRuntimeElements) {
        skip()
    }
}

processResources {
    inputs.property "version", version

    filesMatching("META-INF/neoforge.mods.toml") {
        expand "version": version
    }
}