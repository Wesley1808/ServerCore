plugins {
    id "com.github.johnrengelman.shadow" version "8.1.1"
}

architectury {
    platformSetupLoomIde()
    forge()
}

configurations {
    common
    shadowCommon
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentForge.extendsFrom common
}

loom {
    forge {
        mixinConfig "servercore.common.mixins.json"
        convertAccessWideners.set true
    }
}

dependencies {
    forge "net.minecraftforge:forge:${project.minecraft}-${project.forge_version}"

    // Common
    common(project(path: ":common", configuration: "namedElements")) { transitive false }
    shadowCommon(project(path: ":common", configuration: "transformProductionForge")) { transitive false }

    // Mixin Extras
    include(forgeRuntimeLibrary("io.github.llamalad7:mixinextras-forge:${project.mixin_extras}"))

    // Configuration
    include(forgeRuntimeLibrary("org.yaml:snakeyaml:${project.snakeyaml}"))
    include(forgeRuntimeLibrary("space.arim.dazzleconf:dazzleconf-core:${project.dazzleconf}"))
    include(forgeRuntimeLibrary("space.arim.dazzleconf:dazzleconf-ext-snakeyaml:${project.dazzleconf}"))

    // Adventure Text
    shadowCommon(implementation(forgeRuntimeLibrary("net.kyori:adventure-text-minimessage:${project.adventure_text}"))) {
        exclude group: "org.intellij"
        exclude group: "org.jetbrains"
    }
    shadowCommon(implementation(forgeRuntimeLibrary("net.kyori:adventure-text-serializer-gson:${project.adventure_text}"))) {
        exclude group: "com.google.code.gson"
        exclude group: "org.intellij"
        exclude group: "org.jetbrains"
    }

    // Allows running other mods in dev environment
    modLocalRuntime(fileTree(dir: 'runtime-mods', include: '*.jar'))
}

tasks.withType(org.gradle.jvm.tasks.Jar).configureEach {
    archiveAppendix.set("forge")
}

shadowJar {
    exclude "architectury.common.json"

    relocateDependency(shadowJar, "net.kyori")
    mergeServiceFiles()

    configurations = [project.configurations.shadowCommon]
    archiveClassifier.set "dev-shadow"
}

private static void relocateDependency(com.github.jengelman.gradle.plugins.shadow.tasks.ShadowJar shadowJar, String pattern) {
    shadowJar.relocate(pattern, "servercore_libs.${pattern}")
}

remapJar {
    input.set shadowJar.archiveFile
    dependsOn shadowJar
    archiveClassifier.set null
}

components.java {
    withVariantsFromConfiguration(project.configurations.shadowRuntimeElements) {
        skip()
    }
}

processResources {
    inputs.property "version", version

    filesMatching("META-INF/mods.toml") {
        expand "version": version
    }
}