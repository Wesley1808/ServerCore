plugins {
    id "com.gradleup.shadow" version "8.3.6"
}

architectury {
    platformSetupLoomIde()
    fabric()
}

configurations {
    common {
        canBeResolved = true
        canBeConsumed = false
    }
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentFabric.extendsFrom common

    // Files in this configuration will be bundled into your mod using the Shadow plugin.
    // Don't use the `shadow` configuration from the plugin itself as it's meant for excluding files.
    shadowBundle {
        canBeResolved = true
        canBeConsumed = false
    }
}

repositories {
    maven { url "https://maven.nucleoid.xyz/" }
}

dependencies {
    // Fabric Loader
    modImplementation "net.fabricmc:fabric-loader:${project.fabric_version}"

    // Common
    common(project(path: ":common", configuration: "namedElements")) { transitive false }
    shadowBundle(project(path: ":common", configuration: "transformProductionFabric"))

    // Fabric API
    modImplementation("net.fabricmc.fabric-api:fabric-api:${project.fabric_api}")

    // Permission API
    modImplementation(include("me.lucko:fabric-permissions-api:${project.permission_api}"))

    // Placeholder API
    modImplementation(include("eu.pb4:placeholder-api:${project.placeholder_api}"))

    // Configuration
    runtimeOnly(include("org.yaml:snakeyaml:${project.snakeyaml}"))
    runtimeOnly(include("space.arim.dazzleconf:dazzleconf-core:${project.dazzleconf}"))
    runtimeOnly(include("space.arim.dazzleconf:dazzleconf-ext-snakeyaml:${project.dazzleconf}"))
}

tasks.withType(org.gradle.jvm.tasks.Jar).configureEach {
    archiveAppendix.set("fabric")
}

shadowJar {
    exclude "architectury.common.json"
    configurations = [project.configurations.shadowBundle]
    archiveClassifier = 'dev-shadow'
}

remapJar {
    injectAccessWidener = true
    input.set shadowJar.archiveFile
    dependsOn shadowJar
    archiveClassifier.set null
}

components.java {
    withVariantsFromConfiguration(project.configurations.shadowRuntimeElements) {
        skip()
    }
}

processResources {
    inputs.property "version", version

    filesMatching("fabric.mod.json") {
        expand "version": version
    }
}